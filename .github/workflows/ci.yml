name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

permissions:
  contents: read

jobs:
  test:
    name: Test & Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: ['1.24']
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Vet
        run: go vet ./...

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with coverage (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: go test -v -race -coverprofile=coverage.out -coverpkg=./... ./...

      - name: Build
        run: go build -v ./cmd/postman-gen

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          output_name="postman-gen-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -v -ldflags="-s -w" -o "${output_name}" ./cmd/postman-gen

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: postman-gen-${{ matrix.goos }}-${{ matrix.goarch }}
          path: postman-gen-*
          retention-days: 30
